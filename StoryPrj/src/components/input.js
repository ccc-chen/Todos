// Generated by CoffeeScript 2.1.1
var CFX, StoryTodos, actions, mapActionToProps, mapStateToProps, reducers, sagas;

import {
  ddbs as dd
} from 'ddeyes';

import React, {
  Component
} from 'react';

import {
  HotKeys
} from 'react-hotkeys';

import {
  Input
} from 'StoryView';

import {
  prefixDom
} from 'cfx.dom';

import {
  connect
} from 'cfx.react-redux';

import {
  store,
  services,
  toolFunc
} from 'ReduxServ';

dd(services);

({actions, reducers, sagas} = store);

import {
  getState
} from './components';

CFX = prefixDom({Input, HotKeys});

StoryTodos = class StoryTodos extends Component {
  constructor(props) {
    super(props);
    this.state = {
      todo: '',
      filter: props.state.filter
    };
    this;
    dd(props);
  }

  componentWillReceiveProps(nextProps) {
    var filter;
    ({filter} = nextProps.state);
    this.setState({filter});
    return this;
  }

  render() {
    var c_HotKeys, c_Input, handlers, keyMap;
    ({c_Input, c_HotKeys} = CFX);
    keyMap = {
      clear: 'enter'
    };
    handlers = {
      clear: (function() {
        return this.refs.RefInput.clearInput();
      }).bind(this)
    };
    c_HotKeys({keyMap, handlers});
    return c_HotKeys({
      keyMap: {
        submit: 'enter'
      },
      handlers: {
        submit: (function() {
          // @props.actions.create todo: @state.todo
          this.props.actions.create(toolFunc, {
            nickname: 'chenhuan',
            password: '111'
          }).then((result) => {
            return {result};
          });
          this.refs.RefInput.refs.RefInput.clearInput();
          return dd(this.refs);
        }).bind(this)
      }
    }, c_Input({
      ref: 'RefInput',
      filter: this.state.filter,
      selector: (function(filter) {
        return this.props.actions.filterSave({
          filter: filter
        });
      }).bind(this),
      onChange: (function(v) {
        return this.setState({
          todo: v
        });
      }).bind(this),
      value: this.state.todo
    }));
  }

};

mapStateToProps = function(state) {
  return getState(state.todosRedux);
};

mapActionToProps = {
  filterSave: actions.filterSave,
  // create: actions.todosCreate
  create: services.lc.create
};

export default connect(mapStateToProps, mapActionToProps, StoryTodos);
