// Generated by CoffeeScript 2.1.1
var CFX, LoginForm,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } },
  _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import React from 'react';

import {
  Form
} from 'antd';

import {
  prefixDom
} from 'cfx.dom';

import UserName from './UserName';

import PassWord from './PassWord';

import Commit from './Commit';

import nb from './style';

CFX = prefixDom({'div': 'div', Form, UserName, PassWord, Commit});

LoginForm = class LoginForm extends React.Component {
  constructor() {
    super(...arguments);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleSubmit(e) {
    boundMethodCheck(this, LoginForm);
    e.preventDefault();
    return this.props.form.validateFields((err, values) => {
      if (!err) {
        console.log('Received values of form: ', values);
      }
      return console.log(values, '213123123');
    });
  }

  render() {
    var c_Commit, c_Form, c_PassWord, c_UserName, c_div, getFieldDecorator, loginForm;
    ({c_div, c_Form, c_UserName, c_PassWord, c_Commit} = CFX);
    ({getFieldDecorator} = this.props.form);
    loginForm = c_Form(_extends({
      onSubmit: this.handleSubmit
    }, nb('loginForm')), c_UserName({
      decorator: getFieldDecorator
    }), c_PassWord({
      decorator: getFieldDecorator
    }), c_Commit({
      decorator: getFieldDecorator
    }));
    return c_div({
      id: 'components-form-demo-normal-login'
    }, loginForm);
  }

};

export default Form.create()(LoginForm);
